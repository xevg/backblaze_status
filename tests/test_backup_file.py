from datetime import datetime
from pathlib import Path

from PyQt6.QtGui import QColor

import backblaze_status

from backblaze_status import BzBatch, BackupFile

# Generated by CodiumAI


class TestBackupFile:
    #  BackupFile object can be initialized with required parameters
    def test_initialized_with_required_parameters(self):
        file_name = Path("example_file.txt")
        file_size = 1000

        backup_file = BackupFile(file_name, file_size)

        assert backup_file.file_name == file_name
        assert backup_file.file_size == file_size
        assert backup_file.list_index == 0
        assert isinstance(backup_file.timestamp, datetime)
        assert backup_file.completed == False
        assert backup_file.is_deduped == False
        assert backup_file.previous_run == False
        assert backup_file._deduped_bytes == 0
        assert backup_file._transmitted_bytes == 0
        assert backup_file._total_bytes_processed == 0
        assert backup_file.is_large_file == False
        assert backup_file._chunks_total == 0
        assert backup_file._prepared_chunks == set()
        assert backup_file._deduped_chunks == set()
        assert backup_file._transmitted_chunks == set()
        assert backup_file._current_chunk == 0
        assert backup_file.batch is None
        assert backup_file._rate == ""
        assert backup_file.completed_run == 0
        assert isinstance(backup_file.start_time, datetime)
        assert backup_file.end_time == 0

    #  BackupFile object can be initialized with optional parameters
    def test_initialized_with_optional_parameters(self):
        file_name = Path("example_file.txt")
        file_size = 1000
        list_index = 1
        timestamp = datetime.now()
        completed = True
        is_deduped = True
        previous_run = True
        deduped_bytes = 100
        transmitted_bytes = 200
        total_bytes_processed = 300
        large_file = True
        chunks_total = 10
        chunks_prepared = {1, 2, 3}
        chunks_deduped = {4, 5, 6}
        chunks_transmitted = {7, 8, 9}
        current_chunk = 5
        batch = BzBatch(100, "2022-01-01")
        rate = "10 MB/s"
        completed_run = 1
        start_time = datetime.now()
        end_time = datetime.now()
        row_color = QColor("Red")
        timestamp_color = QColor("Blue")
        file_name_color = QColor("Green")
        file_size_color = QColor("Yellow")
        start_time_color = QColor("Orange")
        rate_color = QColor("Purple")

        backup_file = BackupFile(
            file_name,
            file_size,
            list_index=list_index,
            timestamp=timestamp,
            completed=completed,
            is_deduped=is_deduped,
            previous_run=previous_run,
            _deduped_bytes=deduped_bytes,
            _transmitted_bytes=transmitted_bytes,
            _total_bytes_processed=total_bytes_processed,
            is_large_file=large_file,
            _chunks_total=chunks_total,
            _prepared_chunks=chunks_prepared,
            _deduped_chunks=chunks_deduped,
            _transmitted_chunks=chunks_transmitted,
            _current_chunk=current_chunk,
            batch=batch,
            _rate=rate,
            completed_run=completed_run,
            start_time=start_time,
            end_time=end_time,
            row_color=row_color,
            timestamp_color=timestamp_color,
            file_name_color=file_name_color,
            file_size_color=file_size_color,
            start_time_color=start_time_color,
            rate_color=rate_color,
        )

        assert backup_file.file_name == file_name
        assert backup_file.file_size == file_size
        assert backup_file.list_index == list_index
        assert backup_file.timestamp == timestamp
        assert backup_file.completed == completed
        assert backup_file.is_deduped == is_deduped
        assert backup_file.previous_run == previous_run
        assert backup_file._deduped_bytes == deduped_bytes
        assert backup_file._transmitted_bytes == transmitted_bytes
        assert backup_file._total_bytes_processed == total_bytes_processed
        assert backup_file.is_large_file == large_file
        assert backup_file._chunks_total == chunks_total
        assert backup_file._prepared_chunks == chunks_prepared
        assert backup_file._deduped_chunks == chunks_deduped
        assert backup_file._transmitted_chunks == chunks_transmitted
        assert backup_file._current_chunk == current_chunk
        assert backup_file.batch == batch
        assert backup_file._rate == rate
        assert backup_file.completed_run == completed_run
        assert backup_file.start_time == start_time
        assert backup_file.end_time == end_time
        assert backup_file.row_color == row_color
        assert backup_file.timestamp_color == timestamp_color
        assert backup_file.file_name_color == file_name_color
